CC = arm-none-eabi-gcc
AS = arm-none-eabi-as
LD = arm-none-eabi-ld
OBJCOPY = arm-none-eabi-objcopy

# Compiler flags
CFLAGS = -mcpu=arm1176jzf-s -fpic -ffreestanding -std=c++11 -O2 -Wall -Wextra -nostdlib -fno-exceptions -fno-rtti
ASFLAGS = -mcpu=arm1176jzf-s
LDFLAGS = -nostdlib

# Source files
SOURCE_DIR = src
SOURCES_CPP = $(SOURCE_DIR)/kernel_simple.cpp \
              $(SOURCE_DIR)/uart.cpp \
              $(SOURCE_DIR)/memory.cpp \
              $(SOURCE_DIR)/process.cpp

SOURCES_ASM = $(SOURCE_DIR)/vector.s

# Object files
OBJECTS_CPP = $(SOURCES_CPP:.cpp=.o)
OBJECTS_ASM = $(SOURCES_ASM:.s=.o)
OBJECTS = $(OBJECTS_CPP) $(OBJECTS_ASM)

# Output files
TARGET = kernel_simple.bin
LINKER_SCRIPT = $(SOURCE_DIR)/linker.ld

# Path to libgcc
LIBGCC = $(shell $(CC) -print-libgcc-file-name)

.PHONY: all clean run

all: $(TARGET)

$(TARGET): $(OBJECTS)
	$(LD) -T $(LINKER_SCRIPT) -o $(TARGET) $(OBJECTS) $(LDFLAGS) $(LIBGCC)

%.o: %.cpp
	$(CC) $(CFLAGS) -c $< -o $@

%.o: %.s
	$(AS) $(ASFLAGS) $< -o $@

clean:
	rm -f $(OBJECTS) $(TARGET)

run: $(TARGET)
	qemu-system-arm -M versatilepb -m 128M -kernel $(TARGET) -nographic 